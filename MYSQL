4MYSQL

CREATE database bakery_sales;


CREATE table customers(
    customer_id int AUTO_INCREMENT,
full_name varchar(100) not null,
    email varchar(100) UNIQUE,
    birthdate date not null,
    membership_level ENUM('REGULAR', 'PREMIUM', 'VIP') DEFAULT('REGULAR'),
    TOTAL_SPENT DEC(10,2) DEFAULT(0.00),
    PRIMARY KEY(CUSTOMER_ID
               ));

INSERT INTO CUSTOMERS(FULL_NAME, EMAIL, BIRTHDATE, MEMBERSHIP_LEVEL, TOTAL_SPENT)
VALUES
('JOYCE SY', 'JOYCE@EMAIL.COM', '2001-12-12', 'REGULAR', 100.00),
 ('JAYCE SY', 'JAYCE@EMAIL.COM', '2002-11-12', 'VIP', 22.00),
 ('ROMAN SY', 'ROMAN@EMAIL.COM', '2003-10-12', 'VIP', 2000.00),
 ('ROYCE SY', 'ROYCEC@EMAIL.COM', '2005-11-12', 'PREMIUM', 50.00),
 ('JEAN SY', NULL, '2001-12-12', 'REGULAR', 30.00);

SELECT FULL_NAME, MEMBERSHIP_LEVEL 
FROM CUSTOMERS;

SELECT * FROM CUSTOMERS
WHERE TOTAL_SPENT > 500;

SELECT *
FROM CUSTOMERS
WHERE BIRTHDATE > '2000-12-31';

UPDATE CUSTOMERS
SET TOTAL_SPENT = MEMBERSHIP_LEVEL + 300
WHERE MEMBERSHIP_LEVEL = 'REGULAR';

SELECT  * 
FROM CUSTOMERS;

UPDATE CUSTOMERS
SET MEMBERSHIP_LEVEL = 'REGUULAR'
WHERE EMAIL = NULL;

SELECT  * 
FROM CUSTOMERS;

DELETE 
FROM CUSTOMERS
WHERE TOTAL_SPENT = 0.00;


SELECT  * 
FROM CUSTOMERS;

DELETE 
FROM CUSTOMERS
WHERE MEMBERSHIP_LEVEL = 'REGULAR'
LIMIT 1;
-- BECAUSE THEY DONT CARE ABOUT MEMBERSHIP


SELECT  * 
FROM CUSTOMERS;4MYSQL

CREATE database bakery_sales;


CREATE table customers(
    customer_id int AUTO_INCREMENT,
full_name varchar(100) not null,
    email varchar(100) UNIQUE,
    birthdate date not null,
    membership_level ENUM('REGULAR', 'PREMIUM', 'VIP') DEFAULT('REGULAR'),
    TOTAL_SPENT DEC(10,2) DEFAULT(0.00),
    PRIMARY KEY(CUSTOMER_ID
               ));

INSERT INTO CUSTOMERS(FULL_NAME, EMAIL, BIRTHDATE, MEMBERSHIP_LEVEL, TOTAL_SPENT)
VALUES
('JOYCE SY', 'JOYCE@EMAIL.COM', '2001-12-12', 'REGULAR', 100.00),
 ('JAYCE SY', 'JAYCE@EMAIL.COM', '2002-11-12', 'VIP', 22.00),
 ('ROMAN SY', 'ROMAN@EMAIL.COM', '2003-10-12', 'VIP', 2000.00),
 ('ROYCE SY', 'ROYCEC@EMAIL.COM', '2005-11-12', 'PREMIUM', 50.00),
 ('JEAN SY', NULL, '2001-12-12', 'REGULAR', 30.00);

SELECT FULL_NAME, MEMBERSHIP_LEVEL 
FROM CUSTOMERS;

SELECT * FROM CUSTOMERS
WHERE TOTAL_SPENT > 500;

SELECT *
FROM CUSTOMERS
WHERE BIRTHDATE > '2000-12-31';

UPDATE CUSTOMERS
SET TOTAL_SPENT = MEMBERSHIP_LEVEL + 300
WHERE MEMBERSHIP_LEVEL = 'REGULAR';

SELECT  * 
FROM CUSTOMERS;

UPDATE CUSTOMERS
SET MEMBERSHIP_LEVEL = 'REGUULAR'
WHERE EMAIL = NULL;

SELECT  * 
FROM CUSTOMERS;

DELETE 
FROM CUSTOMERS
WHERE TOTAL_SPENT = 0.00;


SELECT  * 
FROM CUSTOMERS;

DELETE 
FROM CUSTOMERS
WHERE MEMBERSHIP_LEVEL = 'REGULAR'
LIMIT 1;
-- BECAUSE THEY DONT CARE ABOUT MEMBERSHIP


SELECT  * 
FROM CUSTOMERS;

-- CREATE DATABASE STUDENT_RECORDS;

-- USE STUDENT_RECORDS;
-- CREATE TABLE STUDENTS(
-- FULL_NAME varchar(100) NOT NULL,
-- AGE INT NOT NULL,
-- BIRTHDATE DATE NOT NULL,
-- GENDER ENUM('MALE', 'FEMALE', 'OTHER') DEFAULT 'OTHER',
-- EMAIL VARCHAR(100) UNIQUE,
-- GRADE_LEVEL INT NOT NULL,
-- primary key (FULL_NAME)
-- );


-- CREATE TABLE CLASSES (
-- CLASS_ID INT NOT NULL,
-- CLASS_NAME varchar(50) UNIQUE,
-- GRADE_LEVEL VARCHAR(10) NOT NULL,
-- MAX_STUDENT INT NOT NULL,
-- CREATED_AT timestamp NOT NULL,
-- primary key (CLASS_ID)
-- );

-- ALTER table STUDENTS
-- ADD STUDENT_ID  INT unique AFTER FULL_NAME;


-- CREATE DATABASE COMPANY_HR;
-- USE COMPANY_HR;

-- CREATE TABLE DEPARTMENTS (
-- DEPT_ID INT AUTO_INCREMENT,
-- DEPT_NAME VARCHAR(50) UNIQUE,
-- LOCATION VARCHAR(100) NOT NULL,
-- PRIMARY KEY (DEPT_ID)
-- );


-- INSERT INTO DEPARTMENTS(DEPT_NAME, LOCATION)
-- VALUES
-- ('IT DEPARTMENT', '3RD FLOOR SAMSON ROAD'),
-- ('HR DEPARTMENT', '2ND FLOOR SAMSON ROAD'),
-- ('TRAINING DEPARTMENT', '1ST FLOOR SAMSON ROAD');

-- CREATE table EMPLOYEES (
-- EMP_ID INT auto_increment,
-- FULL_NAME VARCHAR(100) NOT NULL,
--  EMAIL VARCHAR(100) UNIQUE,
--  AGE INT NOT NULL,
--  DEPT_ID INT NOT NULL,
--  DATE_HIRED DATE NOT NULL,
--  CREATE_AT TIMESTAMP  NOT NULL,
--  constraint CHECK_AGE CHECK (AGE >= 18 AND AGE <= 65),
--  foreign key (DEPT_ID) REFERENCES DEPARTMENTS(DEPT_ID),
--  PRIMARY KEY (EMP_ID)
--  );
--  
-- INSERT INTO EMPLOYEES(	FULL_NAME, 
-- 						EMAIL, 
-- 						AGE, 
-- 						DEPT_ID, 
-- 						DATE_HIRED,
--                         CREATE_AT
--                         )
-- VALUES
-- (	'CORNELIO A. GATBONTON', 
-- 	'CORNELIO@EMAIL.COM', 
-- 	21, 
--     1, 
--     CURDATE(), 
--     CURTIME() ),
-- (	'JOYCE A. GATBONTON', 
-- 	'JOYCE@EMAIL.COM', 
-- 	25, 
--     2, 
--     CURDATE(), 
--     CURTIME() ),
--     (	'RYLE A. GATBONTON', 
-- 	'RYLE@EMAIL.COM', 
-- 	20, 
--     3, 
--     CURDATE(), 
--     CURTIME() )
-- ;

-- CREATE TABLE POSITIONS(
-- POS_ID INT auto_increment,
-- POS_TITLE VARCHAR(50) UNIQUE,
-- EMP_ID INT,
-- SALARY DEC(10, 2) NOT NULL,
-- primary key (POS_ID),
-- foreign key (EMP_ID) references EMPLOYEES(EMP_ID),
-- constraint CHECK_SALARY CHECK(SALARY >= 10000)
-- );
-- INSERT INTO POSITIONS(POS_TITLE, EMP_ID, SALARY)
-- VALUES
-- ('DEVELOPER', 1, 150000.00),
-- ('HEAD RECRUITER', 4, 10000.00),
-- ('HEAD TRAINER', 5, 10000)

-- Test constraint violations:
-- THIS WILL ERROR DUPLICATE EMAIL
--  INSERT INTO EMPLOYEES(	FULL_NAME, 
-- 						EMAIL, 
-- 						AGE, 
-- 						DEPT_ID, 
-- 						DATE_HIRED,
--                         CREATE_AT
--                         )
-- VALUES
-- (	'CORNELIO A. GATBONTON', 
-- 	'CORNELIO@EMAIL.COM', 
-- 	21, 
--     1, 
--     CURDATE(), 
--     CURTIME() );

-- THIS WILL ERROR AGE LESS THAN 18
--  INSERT INTO EMPLOYEES(	FULL_NAME, 
-- 						EMAIL, 
-- 						AGE, 
-- 						DEPT_ID, 
-- 						DATE_HIRED,
--                         CREATE_AT
--                         )
-- VALUES
-- (	'CORNELIO A. GATBONTON', 
-- 	'CORNELIO@EMAIL.COM', 
-- 	15, 
--     1, 
--     CURDATE(), 
--     CURTIME() );

-- THIS WILL ERROR DUPLICATE EMAIL
--  INSERT INTO EMPLOYEES(	FULL_NAME, 
-- 						EMAIL, 
-- 						AGE, 
-- 						DEPT_ID, 
-- 						DATE_HIRED,
--                         CREATE_AT
--                         )
-- VALUES
-- (	'CORNELIO A. GATBONTON', 
-- 	'CORNELIO@EMAIL.COM', 
-- 	21, 
--     1, 
--     CURDATE(), 
--     CURTIME() );

-- THIS WILL ERROR Salary below 10000
-- INSERT INTO POSITIONS(POS_TITLE, EMP_ID, SALARY)
-- VALUES

-- ('HEAD TRAINER', 5, 5000);



--  THIS WILL ERROR Invalid dept_id in employees BECAUISE THERE WERE NO DEPT ID 100 IN PARENT TAble
--  INSERT INTO EMPLOYEES(	FULL_NAME, 
-- 						EMAIL, 
-- 						AGE, 
-- 						DEPT_ID, 
-- 						DATE_HIRED,
--                         CREATE_AT
--                         )
-- VALUES
-- (	'CORNELIO A. GATBONTON', 
-- 	'CORNELIO@EMAIL.COM', 
-- 	21, 
--     100, 
--     CURDATE(), 
--     CURTIME() );


-- CREATE DATABASE HOSPITAL_HR;

-- USE HOSPITAL_HR;

-- CREATE TABLE DEPARTMENTS(
-- DEPT_ID INT AUTO_INCREMENT,
-- DEPT_NAME VARCHAR(50) UNIQUE,
-- FLOOR_NUMBER INT NOT NULL,
-- PRIMARY KEY (DEPT_ID),
-- CONSTRAINT CHECK_FLOOR_NUMBER CHECK(FLOOR_NUMBER >= 1 AND FLOOR_NUMBER <= 10)
-- );

-- CREATE TABLE STAFF(
-- STAFF_ID INT AUTO_INCREMENT,
-- FULL_NAME VARCHAR(100) NOT NULL,
-- EMAIL VARCHAR(100) UNIQUE,
-- ROLE VARCHAR(50) NOT NULL,
-- DEPT_ID INT,
-- DATE_HIRED DATE NOT NULL,
-- CREATE_AT TIMESTAMP NOT NULL,
-- PRIMARY KEY (STAFF_ID),
-- FOREIGN KEY(DEPT_ID) REFERENCES DEPARTMENTS(DEPT_ID)
-- );

-- CREATE TABLE SHIFTS(
-- SHIFT_ID INT AUTO_INCREMENT,
-- SHIFT_NAME VARCHAR(50) NOT NULL,
-- STAFF_ID INT,
-- SHIFT_HOURS INT NOT NULL,
-- PRIMARY KEY (SHIFT_ID),
-- FOREIGN KEY(STAFF_ID) REFERENCES STAFF(STAFF_ID),
-- CONSTRAINT CHECK_SHIFT_HOURS CHECK(SHIFT_HOURS >= 4 AND SHIFT_HOURS <= 12)
-- );

-- 📌 Insert Requirements:
-- Add 2-3 departments (e.g., Surgery, Emergency, Pediatrics)

-- INSERT INTO DEPARTMENTS( DEPT_NAME, FLOOR_NUMBER)
-- VALUES
-- ('Surgery', 1),
-- ('Emergency', 2),
-- ('Pediatrics', 3);

-- Add 3 staff members assigned to departments
-- INSERT INTO STAFF(FULL_NAME, EMAIL, ROLE, DEPT_ID, DATE_HIRED, CREATE_AT)
-- VALUES
-- --  FOR SURGERY
-- ('DOMINIC TANAEL', 'DOMHAIRLOSS@GMAIL.COM', 'HEAD', 1, CURDATE(), curtime()),
-- ('ROMARK CACHO', 'ROMARK@GMAIL.COM', 'ASSISTANT', 1, CURDATE(), curtime()),
-- ('MICHAEL MACINAS', 'MICHAEL@GMAIL.COM', 'JUNIOR', 1, CURDATE(), curtime()),
-- -- FOR EMERGENCY
-- ('MARLON GATBONTON', 'MARLON@GMAIL.COM', 'HEAD', 2, CURDATE(), curtime()),
-- ('LESLIE CASTRO', 'LESLIE@GMAIL.COM', 'ASSISTANT', 2, CURDATE(), curtime()),
-- ('GWENDOLYN TENISON', 'GWENDOLYN@GMAIL.COM', 'JUNIOR', 2, CURDATE(), curtime()),
-- -- FOR PEDIATRICS 
-- ('PATRICIA GATBONTON', 'PATRICIA@GMAIL.COM', 'HEAD', 3, CURDATE(), curtime()),
-- ('CLARISSA CASTRO', 'CLARISSA@GMAIL.COM', 'ASSISTANT', 3, CURDATE(), curtime()),
-- ('DENNIS TENISON', 'DENNIS@GMAIL.COM', 'JUNIOR', 3, CURDATE(), curtime())
-- ; 

-- Add 2 shift records connected to staff members
-- INSERT INTO SHIFTS(SHIFT_NAME, STAFF_ID, SHIFT_HOURS)
-- VALUES
-- ('TULI', 3, 5),
-- ('PUTOL DALIRI', 6, 7),
-- ('TULI', 9, 10); 

--  ⚠️ Error Tests (Do on Purpose):
--  Insert a duplicate email THIS WILL ERROR DUE TO DUPLICATE EMAIL
-- INSERT INTO STAFF(FULL_NAME, EMAIL, ROLE, DEPT_ID, DATE_HIRED, CREATE_AT)
-- VALUES
-- --  FOR SURGERY
-- ('DOMINIC TANAEL', 'DOMHAIRLOSS@GMAIL.COM', 'HEAD', 1, CURDATE(), curtime());

-- Insert a staff with dept_id that doesn’t exist THIS WILL RETURN A ERROR SINCE THERE IS NO 5 IN PARENT TABLE DEPARTMETS
-- INSERT INTO STAFF(FULL_NAME, EMAIL, ROLE, DEPT_ID, DATE_HIRED, CREATE_AT)
-- VALUES
-- --  FOR SURGERY
-- ('DOMINIC TANAEL', 'DOMHAIRLOSS@GMAIL.COM', 'HEAD', 5, CURDATE(), curtime());

-- Insert a department with floor_number = 15 THIS WILL ERROR BECAUSE PARENT TABLE DOES NOT HAVE 15 FLOOR ONLY 3
-- INSERT INTO DEPARTMENTS( DEPT_NAME, FLOOR_NUMBER)
-- VALUES
-- ('Surgery', 15);

-- Insert a shift with hours = 3 THIS WILL ERROR BECAUSE THE LOWEST VALUE OUR DB ACCEPTS IS 4 AND 3 IS NOT INCLUDED
-- INSERT INTO SHIFTS(SHIFT_NAME, STAFF_ID, SHIFT_HOURS)
-- VALUES
-- ('TULI', 3, 3);

--  Insert a shift with staff_id that doesn’t exist   THIS WILL ERROR BECAUSE THRERE WE'RE NO ID 500 IN STAFF TABLE
-- INSERT INTO SHIFTS(SHIFT_NAME, STAFF_ID, SHIFT_HOURS)
-- VALUES
-- ('TULI', 500, 5);


-- CREATE DATABASE COLLEGE_DB;

-- USE COLLEGE_DB;

-- CREATE TABLE DEPARTMENTS(
-- DEPT_ID INT auto_increment,
--  DEPT_NAME varchar(100) UNIQUE,
--  primary key(DEPT_ID)
--  );


-- CREATE TABLE STUDENTS(
-- STUDENT_ID INT auto_increment,
-- FULL_NAME VARCHAR(100) NOT NULL,
-- DEPT_ID INT,
-- YEAR_LEVEL ENUM('1st', '2nd', '3rd', '4th')default ('1st'), -- THIS IS BETTER THAN VARCHAR FOR DATA CONSISTENCY
-- PRIMARY KEY (STUDENT_ID),
-- foreign key(DEPT_ID) references departments(DEPT_ID)
-- );

-- INSERT INTO DEPARTMENTS(
-- DEPT_NAME)
-- VALUES
-- ('IT DEPARTMENT'),
-- ('HR DEPARTMENT'),
-- ('TRAINING DEPARTMENT');

-- INSERT INTO STUDENTS(
-- FULL_NAME, DEPT_ID, YEAR_LEVEL)
-- VALUES
-- ('LESLIE TENISON', 1, '1st'),
-- ('GWENDOLYN TENISON', 1, '1st'),
-- ('BENJAMIN TENISON', 2, '2nd'),
-- ('KEVIN ELEVEN', 2, '2nd'),
-- ('VIGAX THE DESTROYER', 3, '3rd'),
-- ('ASSMUT THE CREATOR', 3, '3rd');

-- select STUDENT_ID, FULL_NAME, DEPT_NAME, YEAR_LEVEL
-- FROM DEPARTMENTS
-- INNER JOIN STUDENTS 
-- ON DEPARTMENTS.DEPT_ID = STUDENTS.DEPT_ID;
-- IT STILL RUN BUT RETURN A BLANK TABLE
-- select STUDENT_ID, FULL_NAME, DEPT_NAME, YEAR_LEVEL
-- FROM DEPARTMENTS
-- INNER JOIN STUDENTS 
-- ON DEPARTMENTS.DEPT_ID = STUDENTS.DEPT_ID

-- where STUDENTS.STUDENT_ID = 7
-- ;
-- IT OUTPUT SAME JUST LIKE INNER JOIN
-- select STUDENT_ID, FULL_NAME, DEPT_NAME, YEAR_LEVEL
-- FROM DEPARTMENTS
-- LEFT JOIN STUDENTS 
-- ON DEPARTMENTS.DEPT_ID = STUDENTS.DEPT_ID;

-- IT OUTPUTS IN ASCENDING ORDER MUCH CLEANER
-- select STUDENT_ID, FULL_NAME, DEPT_NAME, YEAR_LEVEL
-- FROM DEPARTMENTS
-- right JOIN STUDENTS 
-- ON DEPARTMENTS.DEPT_ID = STUDENTS.DEPT_ID;



-- CREATE DATABASE LIBRARY_SYSTEM;
-- USE LIBRARY_SYSTEM;

-- CREATE TABLE AUTHORS(
-- AUTHOR_ID INT auto_increment,
-- FULL_NAME VARCHAR(100) NOT NULL,
-- COUNTRY VARCHAR(50) NOT NULL,
-- PRIMARY KEY (AUTHOR_ID)
-- );

-- CREATE TABLE BOOKS(
-- BOOK_ID INT auto_increment,
-- TITLE VARCHAR(100) NOT  NULL,
-- PAGES INT NOT NULL,
-- AUTHOR_ID INT,
-- PUBLISHED DATE NOT NULL,
-- PRIMARY KEY (BOOK_ID),
-- CONSTRAINT CHECK_PAGES CHECK(PAGES >= 10),
-- foreign key (AUTHOR_ID) REFERENCES AUTHORS(AUTHOR_ID)
-- ); 

-- INSERT INTO AUTHORS 
-- (FULL_NAME, COUNTRY)
-- VALUES
-- ('LESLEY TENISON', 'PHILIPINES'),
-- ('JOYCE ANN JULIANO', 'NEW ZEALAND'),
-- ('RYLE  BEKLOG', 'JAPAN');

-- INSERT INTO BOOKS
-- (TITLE, PAGES, AUTHOR_ID, PUBLISHED)
-- VALUES
-- ('THE LIFE OF LESLIE', 11, 1, CURDATE()),
-- ('THE LIFE OF A WEB DEVELOPER', 12, 1, CURDATE()),
-- ('FUNDAMENTALS OF HTML', 13, 2, CURDATE()),
-- ('THE BASICS OF CSS', 14, 2, CURDATE()),
-- ('THE TAILWIND MASTER', 15, 3, CURDATE()),
-- ('THE MASTERY OF REACT JS', 16, 3, CURDATE());

-- USING LENGTH() FUNCTION
-- SELECT LENGTH(TITLE) AS TITLE -- SET ALIAS FOR BETTER REDABILITY
-- FROM BOOKS;

-- USING  UPPER(), LOWER() FUNCTIONS
-- SELECT  UPPER(TITLE) AS TITLE_UPPER, LOWER(TITLE) AS TITLE_LOWER
-- FROM BOOKS;

-- USING  CONCAT() FUNCTIONS
-- SELECT CONCAT(FULL_NAME, " FROM ", COUNTRY) AS AUTHORS_ORIGINATED
-- FROM AUTHORS;

--  Use WHERE published < '2020-01-01'
-- SELECT PUBLISHED
-- FROM BOOKS
-- WHERE PUBLISHED < '2020-01-01';

-- USING  NOW() FUNCTIONS
-- SELECT TITLE, FULL_NAME AS NAME, curtime() AS CURTIME, NOW() AS NOWFNCTION
-- FROM BOOKS, AUTHORS;

-- SELECT TITLE, FULL_NAME AS NAME, CURTIME() AS CURTIME, NOW() AS NOWFNCTION
-- FROM BOOKS
-- INNER JOIN AUTHORS ON BOOKS.AUTHOR_ID = AUTHORS.AUTHOR_ID;


 -- CREATE database CUSTOMER_DATA;
--  USE CUSTOMER_DATA;

-- CREATE TABLE USERS(
-- USER_ID INT auto_increment primary KEY,
-- FULL_NAME VARCHAR(100) NOT NULL,
-- EMAIL VARCHAR(100) unique,
-- GENDER ENUM ('MALE', 'FEMALE') DEFAULT 'MALE'
-- );

-- CREATE TABLE PURCHASES(
-- PURCHASE_ID INT AUTO_INCREMENT PRIMARY KEY,
-- USER_ID INT,
-- PRODUCT_NAME VARCHAR(100) NOT NULL, 
-- AMOUNT DECIMAL(10,2) NOT NULL,
-- PURCHASED_AT DATE NOT NULL
-- );

-- INSERT INTO USERS
-- (FULL_NAME, EMAIL, GENDER)
-- VALUES
-- ('JOYCE GELLE', 'JOYCE@GMAIL.COM', 'FEMALE'),
-- ('GOYCE GULIANIO', 'GOYCE@GMAIL.COM', 'MALE'),
-- ('GIYU TAMIOKA', 'GIYU@GMAIL.COM', 'MALE'),
-- ('GAARA LLU', 'GAARA@GMAIL.COM', 'MALE'),
-- ('NAMI SWAN', 'NAMI@GMAIL.COM', 'FEMALE')
-- ;

-- INSERT INTO PURCHASES(
-- USER_ID, PRODUCT_NAME, AMOUNT, PURCHASED_AT
-- )
-- VALUES
-- (1, 'CHOCO CHOCO', 10.00, curdate()),
-- (1, 'DARK CHOCO', 20.00, curdate()),
-- (1, 'WHITE CHOCO', 30.00, curdate()),
-- (1, 'MILK CHOCO', 50.00, curdate()),
-- (1, 'PURE CHOCO', 90.00, curdate()),
-- (2, 'LAVANDER TOWEL', 15.00, curdate()),
-- (2, 'ORANGE JUICE', 15.00, curdate()),
-- (2, 'PIZZA PIE', 35.00, curdate()),
-- (2, 'MILK', 25.00, curdate()),
-- (2, 'CORN CHIPS', 53.00, curdate()),
-- (3, 'CORN PIE', 12.00, curdate()),
-- (3, 'PEACH PIE', 13.00, curdate()),
-- (3, 'APPLE PIE', 16.00, curdate()),
-- (3, 'CHOCO PIE', 17.00, curdate()),
-- (3, 'CREAM PIE', 19.00, curdate()),
-- (4, 'FRIED FRIES', 12.00, curdate()),
-- (4, 'HASH BROWN', 54.00, curdate()),
-- (4, 'HOT CAKE', 34.00, curdate()),
-- (4, 'CHOCO COFFEE', 23.00, curdate()),
-- (4, 'CHOCO BREAD', 14.00, curdate()),
-- (5, 'MILK BREAD', 23.00, curdate()),
-- (5, 'COCONUT MILK', 56.00, curdate()),
-- (5, 'SOY MILK', 16.00, curdate()),
-- (5, 'ALMOND MILK', 23.00, curdate()),
-- (5, 'SOIL MILK', 44.00, curdate());


-- Wildcard Practice:

-- List users whose names start with 'G'
-- SELECT * 
-- FROM USERS
-- WHERE FULL_NAME LIKE 'G%';
-- List emails that end with .com
-- SELECT * 
-- FROM USERS
-- WHERE EMAIL LIKE '%.COM';

-- Find users with 'LL' in their name
-- SELECT * 
-- FROM USERS 
-- WHERE FULL_NAME LIKE '%LL%';

-- Find users with names of exactly 6 characters
-- select * 
-- FROM USERS
-- WHERE FULL_NAME LIKE '______';

-- Show purchases with amount between 100 and 300
-- SELECT AMOUNT 
-- FROM PURCHASES 
-- WHERE AMOUNT >= 100 AND AMOUNT <= 300;

-- Display product_name in uppercase
-- SELECT upper(PRODUCT_NAME)
-- FROM PURCHASES;

-- Join users and purchases and display full_name, product_name, amount, purchased_at
-- select FULL_NAME, PRODUCT_NAME, AMOUNT, PURCHASED_AT
-- FROM PURCHASES
-- inner join USERS ON USERS.USER_ID = PURCHASES.USER_ID;


-- create DATABASE SALES_SYSTEM;
-- USE SALES_SYSTEM;


-- CREATE TABLE CUSTOMERS(
-- CUSTOMER_ID INT auto_increment PRIMARY KEY,
-- FULL_NAME VARCHAR(100) NOT NULL,
-- EMAIL VARCHAR(100) unique,
-- GENDER ENUM('MALE', 'FEMALE') DEFAULT('MALE')
-- );

-- CREATE TABLE SALES(
-- SALE_ID INT auto_increment PRIMARY KEY,
-- CUSTOMER_ID INT NOT NULL,
-- PRODUCT VARCHAR(100) NOT NULL,
-- QUANTITY INT NOT NULL,
-- PRICE DECIMAL(10, 2) NOT NULL,
-- SALE_DATE DATE NOT NULL,
-- foreign key(CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
-- );

-- INSERT INTO CUSTOMERS
-- (FULL_NAME, EMAIL, GENDER)
-- VALUES
-- ('JOYCE', 'JOYCE@GMAIL.COM', 'FEMALE'),
-- ('SPARKUPINE', 'KCCRTKCCRT@GMAIL.COM', 'MALE'),
-- ('FLUE', 'INFLUENCE@GMAIL.COM', 'MALE'),
-- ('HYDRO SEAL', 'HYDROFCKGMAIL.COM', 'FEMALE'),
-- ('WADDLES', 'WADDLES@GMAIL.COM', 'FEMALE');

-- INSERT INTO SALES
-- (CUSTOMER_ID, PRODUCT, QUANTITY, PRICE, SALE_DATE)
-- VALUES
-- (1, 'MOLTEN COIN', 2, 99.99, curdate()),
-- (1, 'FROZEN COIN', 2, 199.99, curdate()),
-- (2, 'GOLDEN COIN', 3, 299.99, curdate()),
-- (2, 'BRONZE COIN', 4, 399.99, curdate()),
-- (3, 'SILVER COIN', 1, 499.99, curdate()),
-- (4, 'IRON COIN', 5, 599.99, curdate()),
-- (4, 'NICKLE COIN', 1, 699.99, curdate()),
-- (5, 'GRASS COIN', 8, 799.99, curdate()),
-- (5, 'FOIL COIN', 10, 999.99, curdate());

-- SELECT PRODUCT
-- FROM SALES
-- ORDER BY PRODUCT; -- DEFAULT ASC.

-- SELECT PRICE 
-- FROM SALES
-- ORDER BY PRICE desc; -- FROM HIGHEST TO LOWEST

-- SELECT PRODUCT, QUANTITY
-- FROM SALES
-- ORDER BY QUANTITY; -- DEFAULT ASC. SHOWING QUANTITY SMALLES TO LARGEST

-- SELECT * 
-- FROM CUSTOMERS
-- join SALES ON CUSTOMERS.CUSTOMER_ID = SALES.CUSTOMER_ID
-- ORDER BY SALE_DATE; -- SHOWING SALE DATE NEWEST

-- SELECT PRODUCT, PRICE
-- FROM SALES
-- ORDER BY PRICE desc
-- LIMIT 3; -- SHOWING TOP 3 MOST EXPENSIVE

-- SELECT PRODUCT, PRICE, SALE_DATE
-- FROM SALES
-- ORDER BY SALE_DATE
-- LIMIT 5 -- SHOWING TOP 5 LATEST SOLD PRODUCT

-- SELECT FULL_NAME, GENDER
-- FROM CUSTOMERS
-- WHERE GENDER LIKE 'FEMALE' 
-- LIMIT 1; 




-- CREATE DATABASE CLINIC_DB; -- CREATING A DATABASE

-- USE CLINIC_DB; -- USING DATABASE

-- CREATE TABLE PATIENTS -- CREATING TABLE
-- (
-- PATIENT_ID INT auto_increment PRIMARY KEY,
-- FULL_NAME VARCHAR(100) NOT NULL,
-- GENDER ENUM('MALE', 'FEMALE') DEFAULT 'MALE',
-- ADMITTED_AT DATE NOT NULL
-- );

-- INSERT INTO PATIENTS( -- INSERTING OF DATA
-- FULL_NAME, GENDER, ADMITTED_AT )
-- VALUES
-- ('JAYSON', 'MALE', curdate()),
-- ('BISON', 'FEMALE', curdate()),
-- ('SON OF A BITCH', 'MALE', curdate());

-- SELECT FULL_NAME AS PATIENT_NAME -- SELECT + ALIASES
-- FROM PATIENTS;

-- create TABLE CHECKUPS( -- CREATING A FK CONNECTION WITH PARENT TABLE
-- PATIENT_ID INT NOT NULL,
-- checkup_date date not null,
-- FOREIGN KEY(PATIENT_ID) references PATIENTS(PATIENT_ID)
-- );

-- insert into checkups -- INSERTING A DATA ON THE FK TABLE REF. IN PK FROM PARENT TABLE PATIENTS
-- (patient_id, checkup_date)
-- values 
-- (1, curdate()),
-- (1, curdate()),
-- (1, curdate()),
-- (1, curdate()),
-- (2, curdate());

-- select p.full_name, c.checkup_date -- INNER JOIN BETWEEN PARENT TBL AND CHILD TBL WITH ALIAS
-- from checkups as c
-- inner join patients as p
-- on c.patient_id = p.patient_id; 
	
-- SELECT concat(P.FULL_NAME, " CHECK UP ON ", C.CHECKUP_DATE ) AS SCHEDULE -- USING CONCAT FUNCTION INNER JOIN AND ALIAS
-- FROM PATIENTS AS P
-- INNER JOIN CHECKUPS AS C
-- ON P.PATIENT_ID = C.PATIENT_ID;

-- SELECT count(PATIENT_ID) -- USING COUNT FUNCTION
-- FROM CHECKUPS;

-- SELECT * -- SELECTING WITH CONDITION USING WHERE CLAUSE
-- FROM PATIENTS 
-- WHERE GENDER = "FEMALE";

-- SELECT FULL_NAME -- USING WILDCARDS
-- FROM PATIENTS
-- WHERE FULL_NAME LIKE 'SON%'; -- SON ON THE BEGINNING
-- WHERE FULL_NAME LIKE '%SON'; -- SON ON THE END

-- SELECT CHECKUP_DATE -- USING ORDER BY AND DESC
-- FROM CHECKUPS
-- ORDER BY CHECKUP_DATE desc;

-- SELECT CHECKUP_DATE -- USING LIMIT TO GET 2 LATEST CHECK UP DATE IN ASC ORDER IT WAS THE DEFAULT
-- FROM CHECKUPS
-- LIMIT 2;

-- UPDATE PATIENTS -- USING UPDATE TO UPDATE A USERS DATE
-- SET FULL_NAME = 'UPDATED NAME'
-- WHERE PATIENT_ID = 1;

-- SELECT PATIENT_ID, FULL_NAME -- UNION DEFAULT DONT RETRIEVE DUPLICATE DATA / UNION ALL RETRIEVE ALL DATA EVEN DUP. I USE JOIN TO MATCH ITS COLUMNS BECAUSE UNION NEED TO MATCH BOTH TABLE IT WILL RETRIEVE 
-- FROM PATIENTS
-- UNION
-- SELECT C.PATIENT_ID, P.FULL_NAME
-- FROM CHECKUPS AS C
-- INNER JOIN PATIENTS AS P
-- ON P.PATIENT_ID = C.PATIENT_ID;

-- alter TABLE PATIENTS -- USING ALTER TABLE TO ADD COLUMN IN EXISTING TABLE
-- ADD COLUMN
-- AGE INT NULL;

-- ALTER TABLE PATIENTS -- USING ALTER TABLE TO CHANGE THE DATA TYPE FROM 100 TO 150
-- MODIFY COLUMN 
-- FULL_NAME VARCHAR(150) NOT NULL;


-- ALTER TABLE PATIENTS -- USING ALTER TABLE TO DROP A COLUMN IN A TABLE
-- DROP COLUMN GENDER;

-- ALTER TABLE CHECKUPS -- USING ALTER TABLE TO ADD CONSTRAINT ON A COLUMN NOW JUST IMAGINE IT AS NOT FK, INITIALY I SET IS AS FK, BUT IF I FORGOT HERE THE CODE  TO RE-ASSIGNED IT TO FK
-- ADD CONSTRAINT 
-- foreign key(PATIENT_ID) references PATIENTS(PATIENT_ID);

-- DELETE FROM -- DELETING A RECORDS / IF THE RECORDS HAS FK DATA  FROM OTHER TABLE YOU CANT DELETE IT
-- PATIENTS
-- WHERE PATIENT_ID = 4;

-- truncate CHECKUPS; -- TO DELETE ALL OF THE DATA IN A TABLE

CASE WAS NOT YET TACKLED


