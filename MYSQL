4MYSQL

CREATE database bakery_sales;


CREATE table customers(
    customer_id int AUTO_INCREMENT,
full_name varchar(100) not null,
    email varchar(100) UNIQUE,
    birthdate date not null,
    membership_level ENUM('REGULAR', 'PREMIUM', 'VIP') DEFAULT('REGULAR'),
    TOTAL_SPENT DEC(10,2) DEFAULT(0.00),
    PRIMARY KEY(CUSTOMER_ID
               ));

INSERT INTO CUSTOMERS(FULL_NAME, EMAIL, BIRTHDATE, MEMBERSHIP_LEVEL, TOTAL_SPENT)
VALUES
('JOYCE SY', 'JOYCE@EMAIL.COM', '2001-12-12', 'REGULAR', 100.00),
 ('JAYCE SY', 'JAYCE@EMAIL.COM', '2002-11-12', 'VIP', 22.00),
 ('ROMAN SY', 'ROMAN@EMAIL.COM', '2003-10-12', 'VIP', 2000.00),
 ('ROYCE SY', 'ROYCEC@EMAIL.COM', '2005-11-12', 'PREMIUM', 50.00),
 ('JEAN SY', NULL, '2001-12-12', 'REGULAR', 30.00);

SELECT FULL_NAME, MEMBERSHIP_LEVEL 
FROM CUSTOMERS;

SELECT * FROM CUSTOMERS
WHERE TOTAL_SPENT > 500;

SELECT *
FROM CUSTOMERS
WHERE BIRTHDATE > '2000-12-31';

UPDATE CUSTOMERS
SET TOTAL_SPENT = MEMBERSHIP_LEVEL + 300
WHERE MEMBERSHIP_LEVEL = 'REGULAR';

SELECT  * 
FROM CUSTOMERS;

UPDATE CUSTOMERS
SET MEMBERSHIP_LEVEL = 'REGUULAR'
WHERE EMAIL = NULL;

SELECT  * 
FROM CUSTOMERS;

DELETE 
FROM CUSTOMERS
WHERE TOTAL_SPENT = 0.00;


SELECT  * 
FROM CUSTOMERS;

DELETE 
FROM CUSTOMERS
WHERE MEMBERSHIP_LEVEL = 'REGULAR'
LIMIT 1;
-- BECAUSE THEY DONT CARE ABOUT MEMBERSHIP


SELECT  * 
FROM CUSTOMERS;4MYSQL

CREATE database bakery_sales;


CREATE table customers(
    customer_id int AUTO_INCREMENT,
full_name varchar(100) not null,
    email varchar(100) UNIQUE,
    birthdate date not null,
    membership_level ENUM('REGULAR', 'PREMIUM', 'VIP') DEFAULT('REGULAR'),
    TOTAL_SPENT DEC(10,2) DEFAULT(0.00),
    PRIMARY KEY(CUSTOMER_ID
               ));

INSERT INTO CUSTOMERS(FULL_NAME, EMAIL, BIRTHDATE, MEMBERSHIP_LEVEL, TOTAL_SPENT)
VALUES
('JOYCE SY', 'JOYCE@EMAIL.COM', '2001-12-12', 'REGULAR', 100.00),
 ('JAYCE SY', 'JAYCE@EMAIL.COM', '2002-11-12', 'VIP', 22.00),
 ('ROMAN SY', 'ROMAN@EMAIL.COM', '2003-10-12', 'VIP', 2000.00),
 ('ROYCE SY', 'ROYCEC@EMAIL.COM', '2005-11-12', 'PREMIUM', 50.00),
 ('JEAN SY', NULL, '2001-12-12', 'REGULAR', 30.00);

SELECT FULL_NAME, MEMBERSHIP_LEVEL 
FROM CUSTOMERS;

SELECT * FROM CUSTOMERS
WHERE TOTAL_SPENT > 500;

SELECT *
FROM CUSTOMERS
WHERE BIRTHDATE > '2000-12-31';

UPDATE CUSTOMERS
SET TOTAL_SPENT = MEMBERSHIP_LEVEL + 300
WHERE MEMBERSHIP_LEVEL = 'REGULAR';

SELECT  * 
FROM CUSTOMERS;

UPDATE CUSTOMERS
SET MEMBERSHIP_LEVEL = 'REGUULAR'
WHERE EMAIL = NULL;

SELECT  * 
FROM CUSTOMERS;

DELETE 
FROM CUSTOMERS
WHERE TOTAL_SPENT = 0.00;


SELECT  * 
FROM CUSTOMERS;

DELETE 
FROM CUSTOMERS
WHERE MEMBERSHIP_LEVEL = 'REGULAR'
LIMIT 1;
-- BECAUSE THEY DONT CARE ABOUT MEMBERSHIP


SELECT  * 
FROM CUSTOMERS;

-- CREATE DATABASE STUDENT_RECORDS;

-- USE STUDENT_RECORDS;
-- CREATE TABLE STUDENTS(
-- FULL_NAME varchar(100) NOT NULL,
-- AGE INT NOT NULL,
-- BIRTHDATE DATE NOT NULL,
-- GENDER ENUM('MALE', 'FEMALE', 'OTHER') DEFAULT 'OTHER',
-- EMAIL VARCHAR(100) UNIQUE,
-- GRADE_LEVEL INT NOT NULL,
-- primary key (FULL_NAME)
-- );


-- CREATE TABLE CLASSES (
-- CLASS_ID INT NOT NULL,
-- CLASS_NAME varchar(50) UNIQUE,
-- GRADE_LEVEL VARCHAR(10) NOT NULL,
-- MAX_STUDENT INT NOT NULL,
-- CREATED_AT timestamp NOT NULL,
-- primary key (CLASS_ID)
-- );

-- ALTER table STUDENTS
-- ADD STUDENT_ID  INT unique AFTER FULL_NAME;


-- CREATE DATABASE COMPANY_HR;
-- USE COMPANY_HR;

-- CREATE TABLE DEPARTMENTS (
-- DEPT_ID INT AUTO_INCREMENT,
-- DEPT_NAME VARCHAR(50) UNIQUE,
-- LOCATION VARCHAR(100) NOT NULL,
-- PRIMARY KEY (DEPT_ID)
-- );


-- INSERT INTO DEPARTMENTS(DEPT_NAME, LOCATION)
-- VALUES
-- ('IT DEPARTMENT', '3RD FLOOR SAMSON ROAD'),
-- ('HR DEPARTMENT', '2ND FLOOR SAMSON ROAD'),
-- ('TRAINING DEPARTMENT', '1ST FLOOR SAMSON ROAD');

-- CREATE table EMPLOYEES (
-- EMP_ID INT auto_increment,
-- FULL_NAME VARCHAR(100) NOT NULL,
--  EMAIL VARCHAR(100) UNIQUE,
--  AGE INT NOT NULL,
--  DEPT_ID INT NOT NULL,
--  DATE_HIRED DATE NOT NULL,
--  CREATE_AT TIMESTAMP  NOT NULL,
--  constraint CHECK_AGE CHECK (AGE >= 18 AND AGE <= 65),
--  foreign key (DEPT_ID) REFERENCES DEPARTMENTS(DEPT_ID),
--  PRIMARY KEY (EMP_ID)
--  );
--  
-- INSERT INTO EMPLOYEES(	FULL_NAME, 
-- 						EMAIL, 
-- 						AGE, 
-- 						DEPT_ID, 
-- 						DATE_HIRED,
--                         CREATE_AT
--                         )
-- VALUES
-- (	'CORNELIO A. GATBONTON', 
-- 	'CORNELIO@EMAIL.COM', 
-- 	21, 
--     1, 
--     CURDATE(), 
--     CURTIME() ),
-- (	'JOYCE A. GATBONTON', 
-- 	'JOYCE@EMAIL.COM', 
-- 	25, 
--     2, 
--     CURDATE(), 
--     CURTIME() ),
--     (	'RYLE A. GATBONTON', 
-- 	'RYLE@EMAIL.COM', 
-- 	20, 
--     3, 
--     CURDATE(), 
--     CURTIME() )
-- ;

-- CREATE TABLE POSITIONS(
-- POS_ID INT auto_increment,
-- POS_TITLE VARCHAR(50) UNIQUE,
-- EMP_ID INT,
-- SALARY DEC(10, 2) NOT NULL,
-- primary key (POS_ID),
-- foreign key (EMP_ID) references EMPLOYEES(EMP_ID),
-- constraint CHECK_SALARY CHECK(SALARY >= 10000)
-- );
-- INSERT INTO POSITIONS(POS_TITLE, EMP_ID, SALARY)
-- VALUES
-- ('DEVELOPER', 1, 150000.00),
-- ('HEAD RECRUITER', 4, 10000.00),
-- ('HEAD TRAINER', 5, 10000)

-- Test constraint violations:
-- THIS WILL ERROR DUPLICATE EMAIL
--  INSERT INTO EMPLOYEES(	FULL_NAME, 
-- 						EMAIL, 
-- 						AGE, 
-- 						DEPT_ID, 
-- 						DATE_HIRED,
--                         CREATE_AT
--                         )
-- VALUES
-- (	'CORNELIO A. GATBONTON', 
-- 	'CORNELIO@EMAIL.COM', 
-- 	21, 
--     1, 
--     CURDATE(), 
--     CURTIME() );

-- THIS WILL ERROR AGE LESS THAN 18
--  INSERT INTO EMPLOYEES(	FULL_NAME, 
-- 						EMAIL, 
-- 						AGE, 
-- 						DEPT_ID, 
-- 						DATE_HIRED,
--                         CREATE_AT
--                         )
-- VALUES
-- (	'CORNELIO A. GATBONTON', 
-- 	'CORNELIO@EMAIL.COM', 
-- 	15, 
--     1, 
--     CURDATE(), 
--     CURTIME() );

-- THIS WILL ERROR DUPLICATE EMAIL
--  INSERT INTO EMPLOYEES(	FULL_NAME, 
-- 						EMAIL, 
-- 						AGE, 
-- 						DEPT_ID, 
-- 						DATE_HIRED,
--                         CREATE_AT
--                         )
-- VALUES
-- (	'CORNELIO A. GATBONTON', 
-- 	'CORNELIO@EMAIL.COM', 
-- 	21, 
--     1, 
--     CURDATE(), 
--     CURTIME() );

-- THIS WILL ERROR Salary below 10000
-- INSERT INTO POSITIONS(POS_TITLE, EMP_ID, SALARY)
-- VALUES

-- ('HEAD TRAINER', 5, 5000);



--  THIS WILL ERROR Invalid dept_id in employees BECAUISE THERE WERE NO DEPT ID 100 IN PARENT TAble
--  INSERT INTO EMPLOYEES(	FULL_NAME, 
-- 						EMAIL, 
-- 						AGE, 
-- 						DEPT_ID, 
-- 						DATE_HIRED,
--                         CREATE_AT
--                         )
-- VALUES
-- (	'CORNELIO A. GATBONTON', 
-- 	'CORNELIO@EMAIL.COM', 
-- 	21, 
--     100, 
--     CURDATE(), 
--     CURTIME() );


-- CREATE DATABASE HOSPITAL_HR;

-- USE HOSPITAL_HR;

-- CREATE TABLE DEPARTMENTS(
-- DEPT_ID INT AUTO_INCREMENT,
-- DEPT_NAME VARCHAR(50) UNIQUE,
-- FLOOR_NUMBER INT NOT NULL,
-- PRIMARY KEY (DEPT_ID),
-- CONSTRAINT CHECK_FLOOR_NUMBER CHECK(FLOOR_NUMBER >= 1 AND FLOOR_NUMBER <= 10)
-- );

-- CREATE TABLE STAFF(
-- STAFF_ID INT AUTO_INCREMENT,
-- FULL_NAME VARCHAR(100) NOT NULL,
-- EMAIL VARCHAR(100) UNIQUE,
-- ROLE VARCHAR(50) NOT NULL,
-- DEPT_ID INT,
-- DATE_HIRED DATE NOT NULL,
-- CREATE_AT TIMESTAMP NOT NULL,
-- PRIMARY KEY (STAFF_ID),
-- FOREIGN KEY(DEPT_ID) REFERENCES DEPARTMENTS(DEPT_ID)
-- );

-- CREATE TABLE SHIFTS(
-- SHIFT_ID INT AUTO_INCREMENT,
-- SHIFT_NAME VARCHAR(50) NOT NULL,
-- STAFF_ID INT,
-- SHIFT_HOURS INT NOT NULL,
-- PRIMARY KEY (SHIFT_ID),
-- FOREIGN KEY(STAFF_ID) REFERENCES STAFF(STAFF_ID),
-- CONSTRAINT CHECK_SHIFT_HOURS CHECK(SHIFT_HOURS >= 4 AND SHIFT_HOURS <= 12)
-- );

-- 📌 Insert Requirements:
-- Add 2-3 departments (e.g., Surgery, Emergency, Pediatrics)

-- INSERT INTO DEPARTMENTS( DEPT_NAME, FLOOR_NUMBER)
-- VALUES
-- ('Surgery', 1),
-- ('Emergency', 2),
-- ('Pediatrics', 3);

-- Add 3 staff members assigned to departments
-- INSERT INTO STAFF(FULL_NAME, EMAIL, ROLE, DEPT_ID, DATE_HIRED, CREATE_AT)
-- VALUES
-- --  FOR SURGERY
-- ('DOMINIC TANAEL', 'DOMHAIRLOSS@GMAIL.COM', 'HEAD', 1, CURDATE(), curtime()),
-- ('ROMARK CACHO', 'ROMARK@GMAIL.COM', 'ASSISTANT', 1, CURDATE(), curtime()),
-- ('MICHAEL MACINAS', 'MICHAEL@GMAIL.COM', 'JUNIOR', 1, CURDATE(), curtime()),
-- -- FOR EMERGENCY
-- ('MARLON GATBONTON', 'MARLON@GMAIL.COM', 'HEAD', 2, CURDATE(), curtime()),
-- ('LESLIE CASTRO', 'LESLIE@GMAIL.COM', 'ASSISTANT', 2, CURDATE(), curtime()),
-- ('GWENDOLYN TENISON', 'GWENDOLYN@GMAIL.COM', 'JUNIOR', 2, CURDATE(), curtime()),
-- -- FOR PEDIATRICS 
-- ('PATRICIA GATBONTON', 'PATRICIA@GMAIL.COM', 'HEAD', 3, CURDATE(), curtime()),
-- ('CLARISSA CASTRO', 'CLARISSA@GMAIL.COM', 'ASSISTANT', 3, CURDATE(), curtime()),
-- ('DENNIS TENISON', 'DENNIS@GMAIL.COM', 'JUNIOR', 3, CURDATE(), curtime())
-- ; 

-- Add 2 shift records connected to staff members
-- INSERT INTO SHIFTS(SHIFT_NAME, STAFF_ID, SHIFT_HOURS)
-- VALUES
-- ('TULI', 3, 5),
-- ('PUTOL DALIRI', 6, 7),
-- ('TULI', 9, 10); 

--  ⚠️ Error Tests (Do on Purpose):
--  Insert a duplicate email THIS WILL ERROR DUE TO DUPLICATE EMAIL
-- INSERT INTO STAFF(FULL_NAME, EMAIL, ROLE, DEPT_ID, DATE_HIRED, CREATE_AT)
-- VALUES
-- --  FOR SURGERY
-- ('DOMINIC TANAEL', 'DOMHAIRLOSS@GMAIL.COM', 'HEAD', 1, CURDATE(), curtime());

-- Insert a staff with dept_id that doesn’t exist THIS WILL RETURN A ERROR SINCE THERE IS NO 5 IN PARENT TABLE DEPARTMETS
-- INSERT INTO STAFF(FULL_NAME, EMAIL, ROLE, DEPT_ID, DATE_HIRED, CREATE_AT)
-- VALUES
-- --  FOR SURGERY
-- ('DOMINIC TANAEL', 'DOMHAIRLOSS@GMAIL.COM', 'HEAD', 5, CURDATE(), curtime());

-- Insert a department with floor_number = 15 THIS WILL ERROR BECAUSE PARENT TABLE DOES NOT HAVE 15 FLOOR ONLY 3
-- INSERT INTO DEPARTMENTS( DEPT_NAME, FLOOR_NUMBER)
-- VALUES
-- ('Surgery', 15);

-- Insert a shift with hours = 3 THIS WILL ERROR BECAUSE THE LOWEST VALUE OUR DB ACCEPTS IS 4 AND 3 IS NOT INCLUDED
-- INSERT INTO SHIFTS(SHIFT_NAME, STAFF_ID, SHIFT_HOURS)
-- VALUES
-- ('TULI', 3, 3);

--  Insert a shift with staff_id that doesn’t exist   THIS WILL ERROR BECAUSE THRERE WE'RE NO ID 500 IN STAFF TABLE
-- INSERT INTO SHIFTS(SHIFT_NAME, STAFF_ID, SHIFT_HOURS)
-- VALUES
-- ('TULI', 500, 5);


-- CREATE DATABASE COLLEGE_DB;

-- USE COLLEGE_DB;

-- CREATE TABLE DEPARTMENTS(
-- DEPT_ID INT auto_increment,
--  DEPT_NAME varchar(100) UNIQUE,
--  primary key(DEPT_ID)
--  );


-- CREATE TABLE STUDENTS(
-- STUDENT_ID INT auto_increment,
-- FULL_NAME VARCHAR(100) NOT NULL,
-- DEPT_ID INT,
-- YEAR_LEVEL ENUM('1st', '2nd', '3rd', '4th')default ('1st'), -- THIS IS BETTER THAN VARCHAR FOR DATA CONSISTENCY
-- PRIMARY KEY (STUDENT_ID),
-- foreign key(DEPT_ID) references departments(DEPT_ID)
-- );

-- INSERT INTO DEPARTMENTS(
-- DEPT_NAME)
-- VALUES
-- ('IT DEPARTMENT'),
-- ('HR DEPARTMENT'),
-- ('TRAINING DEPARTMENT');

-- INSERT INTO STUDENTS(
-- FULL_NAME, DEPT_ID, YEAR_LEVEL)
-- VALUES
-- ('LESLIE TENISON', 1, '1st'),
-- ('GWENDOLYN TENISON', 1, '1st'),
-- ('BENJAMIN TENISON', 2, '2nd'),
-- ('KEVIN ELEVEN', 2, '2nd'),
-- ('VIGAX THE DESTROYER', 3, '3rd'),
-- ('ASSMUT THE CREATOR', 3, '3rd');

-- select STUDENT_ID, FULL_NAME, DEPT_NAME, YEAR_LEVEL
-- FROM DEPARTMENTS
-- INNER JOIN STUDENTS 
-- ON DEPARTMENTS.DEPT_ID = STUDENTS.DEPT_ID;
-- IT STILL RUN BUT RETURN A BLANK TABLE
-- select STUDENT_ID, FULL_NAME, DEPT_NAME, YEAR_LEVEL
-- FROM DEPARTMENTS
-- INNER JOIN STUDENTS 
-- ON DEPARTMENTS.DEPT_ID = STUDENTS.DEPT_ID

-- where STUDENTS.STUDENT_ID = 7
-- ;
-- IT OUTPUT SAME JUST LIKE INNER JOIN
-- select STUDENT_ID, FULL_NAME, DEPT_NAME, YEAR_LEVEL
-- FROM DEPARTMENTS
-- LEFT JOIN STUDENTS 
-- ON DEPARTMENTS.DEPT_ID = STUDENTS.DEPT_ID;

-- IT OUTPUTS IN ASCENDING ORDER MUCH CLEANER
-- select STUDENT_ID, FULL_NAME, DEPT_NAME, YEAR_LEVEL
-- FROM DEPARTMENTS
-- right JOIN STUDENTS 
-- ON DEPARTMENTS.DEPT_ID = STUDENTS.DEPT_ID;



 